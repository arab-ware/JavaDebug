package com.my.newproject52;

import android.app.Activity;
import android.app.*;
import android.os.*;
import android.view.*;
import android.view.View.*;
import android.widget.*;
import android.content.*;
import android.content.res.*;
import android.graphics.*;
import android.graphics.drawable.*;
import android.media.*;
import android.net.*;
import android.text.*;
import android.text.style.*;
import android.util.*;
import android.webkit.*;
import android.animation.*;
import android.view.animation.*;
import java.util.*;
import java.util.regex.*;
import java.text.*;
import org.json.*;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.app.Fragment;
import android.app.FragmentManager;
import android.app.DialogFragment;


public class DebugActivity extends  Activity { 
	
	
	private String madeErrMsg2 = "";
	
	private AlertDialog.Builder dialog;
	@Override
	protected void onCreate(Bundle _savedInstanceState) {
		super.onCreate(_savedInstanceState);
		setContentView(R.layout.debug);
		initialize(_savedInstanceState);
		initializeLogic();
	}
	
	private void initialize(Bundle _savedInstanceState) {
		
		dialog = new AlertDialog.Builder(this);
	}
	
	private void initializeLogic() {
		String madeErrMsg = "";
		String[] exceptionType = {"StringIndexOutOfBoundsException","IndexOutOfBoundsException","ArithmeticException","NumberFormatException","ActivityNotFoundException"};
		String[] errMessage= {"Invalid string operation\n","Invalid list operation\n","Invalid arithmetical operation\n","Invalid toNumber block operation\n","Invalid intent operation"};
		Intent intent = getIntent();
				String errMsg = "";
				if(intent != null){
						errMsg = intent.getStringExtra("error");
				String[] spilt = errMsg.split("\n");
						//errMsg = spilt[0];
						try {
								for (int j = 0; j < exceptionType.length; j++) {
										if (spilt[0].contains(exceptionType[j])) {
												madeErrMsg = errMessage[j];
						
												int addIndex = spilt[0].indexOf(exceptionType[j]) + exceptionType[j].length();
						
												madeErrMsg += spilt[0].substring(addIndex, spilt[0].length());
												break;
						
										}
								}
				
								if(madeErrMsg.isEmpty()) madeErrMsg = errMsg;
						}catch(Exception e){}
			
				}
		madeErrMsg2 = madeErrMsg;
		dialog.setTitle("an error found");
		dialog.setMessage("dear user\nwe found a bug in this app\nplz contact the developer to solve it\nthanks");
		dialog.setPositiveButton("copy error message", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface _dialog, int _which) {
				((ClipboardManager) getSystemService(getApplicationContext().CLIPBOARD_SERVICE)).setPrimaryClip(ClipData.newPlainText("clipboard", madeErrMsg2));
			}
		});
		dialog.setNegativeButton("exit", new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface _dialog, int _which) {
				finishAffinity();
			}
		});
	}
	
	@Override
	protected void onActivityResult(int _requestCode, int _resultCode, Intent _data) {
		
		super.onActivityResult(_requestCode, _resultCode, _data);
		
		switch (_requestCode) {
			
			default:
			break;
		}
	}
	
	@Deprecated
	public void showMessage(String _s) {
		Toast.makeText(getApplicationContext(), _s, Toast.LENGTH_SHORT).show();
	}
	
	@Deprecated
	public int getLocationX(View _v) {
		int _location[] = new int[2];
		_v.getLocationInWindow(_location);
		return _location[0];
	}
	
	@Deprecated
	public int getLocationY(View _v) {
		int _location[] = new int[2];
		_v.getLocationInWindow(_location);
		return _location[1];
	}
	
	@Deprecated
	public int getRandom(int _min, int _max) {
		Random random = new Random();
		return random.nextInt(_max - _min + 1) + _min;
	}
	
	@Deprecated
	public ArrayList<Double> getCheckedItemPositionsToArray(ListView _list) {
		ArrayList<Double> _result = new ArrayList<Double>();
		SparseBooleanArray _arr = _list.getCheckedItemPositions();
		for (int _iIdx = 0; _iIdx < _arr.size(); _iIdx++) {
			if (_arr.valueAt(_iIdx))
			_result.add((double)_arr.keyAt(_iIdx));
		}
		return _result;
	}
	
	@Deprecated
	public float getDip(int _input){
		return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, _input, getResources().getDisplayMetrics());
	}
	
	@Deprecated
	public int getDisplayWidthPixels(){
		return getResources().getDisplayMetrics().widthPixels;
	}
	
	@Deprecated
	public int getDisplayHeightPixels(){
		return getResources().getDisplayMetrics().heightPixels;
	}
	
}
